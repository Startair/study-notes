我们可以继续对上面的算法进行优化，我们只是从这些无序的数中选出最大的K个数，并不需要前K个数据有序，也不需要后N-K个数据有序。
怎样才能避免做后N-K个数据有序呢？
回忆一下快速排序，快排中的每一步，都是将待排数据分做两组，其中一组的数据的任何一个数都比另一组中的任何一个大，然后再对两组分别做类似的操
作，然后继续下去……在本问题中，假设 N 个数存储在数组 S 中，我们从数组 S 中随机找出一个元素 X，把数组分为两部分 Sa 和 Sb。
Sa 中的元素大于等于 X，Sb 中元素小于 X。这时，有两种可能性：
1.   Sa中元素的个数小于K，Sa中所有的数和Sb中最大的K-|Sa|个元素（|Sa|指Sa中元素的个数）就是数组S中最大的K个数。
2.   Sa中元素的个数大于或等于K，则需要返回Sa中最大的K个元素。
这样递归下去，不断把问题分解成更小的问题，平均时间复杂度 O（N *log2K）。




#include<stdio.h>  
#include<stdlib.h>  
//进行一次快速排序用哨兵数分割数组中的数据  
int Partition(int a[],int low,int high){  
    int i,j,index;  
    i = low;  
    j = high;  
    //哨兵  
    index = a[i];  
    while(i < j){  
        //从右向左找大于index的数来填a[i]  
        while(a[j] < index && i < j){  
            j--;  
        }  
        //把找到大于index的数赋值给a[i]  
        if(i < j){  
            a[i] = a[j];  
            i++;  
        }  
        //从左向右找小于index的数来填a[j]  
        while(a[i] >= index && i < j){  
            i++;  
        }  
        //把找到小于index的数赋值给a[j]  
        if(i < j){  
            a[j] = a[i];  
            j--;  
        }  
    }  
    a[i] = index;  
    return i;  
}  
int KBig(int a[],int low,int high,int k){  
    int index,n;  
    if(low < high){  
        //对数组进行划分，返回划分的位置  
        index = Partition(a,low,high);  
        n = index - low + 1;  
        //如果等于K返回第K个下标  
        if(n == k){  
            return index;  
        }  
        //不够K个再找k-n个  
        else if(n < k){  
            return KBig(a,index+1,high,k-n);  
        }  
        //如果大于K个则从些中选出最大的K个  
        else{  
            return KBig(a,low,index,k);  
        }  
    }  
}  
  
int main(){  
    int a[] = {4,5,1,6,2,7,3,8};  
    for(i = 0;i <= KBig(a,0,7,6);i++){  
        printf("%d ",a[i]);  
    }  
    printf("\n");  
    return 0;  
}  
